{"version":3,"sources":["config.js","_services/auth.service.js","_services/user.service.js","_services/post.service.js","_helpers/history.js","_components/PrivateRoute.jsx","HomePage/HomePage.jsx","LoginPage/LoginPage.jsx","ProfilePage/ProfilePage.jsx","RegisterPage/RegisterPage.jsx","ChangePasswordPage/ChangePasswordPage.jsx","CreatePostPage/CreatePostPage.jsx","ChangeUsernamePage/ChangeUsernamePage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Config","React","Component","ApiBaseURL","ApiUrls","AUTH","REGISTER","DELETEUSER","CURRENT","ALLUSERS","ALLPOSTS","UPDATEUSERNAME","CREATEPOST","POSTBYAUTHOR","CHANGEPASSWORD","authenticationService","login","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","token","get","localStorage","setItem","currentUser","next","logout","register","email","firstName","lastName","BehaviorSubject","auth","getItem","userService","getCurrent","Accept","res","json","Promise","resolve","deleteUser","console","log","changePassword","oldPass","newPass","updateUsername","newUsername","postService","getAll","createPost","title","content","history","createBrowserHistory","PrivateRoute","component","rest","render","props","to","pathname","state","from","location","HomePage","post","user","setState","this","length","map","id","author","dateCreated","key","LoginPage","currentUserValue","push","initialValues","validationSchema","Yup","shape","required","onSubmit","setStatus","setSubmitting","error","errors","status","touched","isSubmitting","className","htmlFor","name","type","disabled","href","ProfilePage","authorities","authority","handleClick","bind","removeItem","roles","d","Edit","onClick","RegisterPage","confirm_password","submitted","handleChange","handleSubmit","event","target","value","preventDefault","alert","onChange","ChangePasswordPage","confirmPass","CreatePostPage","rows","cols","ChangeUsernamePage","App","document","subscribe","x","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a08ce235.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport class Config extends React.Component{\r\n    static ApiBaseURL = \"http://localhost:8762\"\r\n    static ApiUrls = {\r\n        AUTH: \"/auth\",\r\n        REGISTER: \"/user/UserController/register\",\r\n        DELETEUSER: \"/user/UserController/deleteUser\",\r\n        CURRENT: \"/user/UserController/current\",\r\n        ALLUSERS: \"/user/UserController/all\",\r\n        ALLPOSTS: \"/post/PostController/all\",\r\n        UPDATEUSERNAME: \"/user/UserController/updateUsername\",\r\n        CREATEPOST: \"/post/PostController/createpost\",\r\n        POSTBYAUTHOR: \"/post/PostController/postsbyauthor\",\r\n        CHANGEPASSWORD: \"/user/UserController/changepassword\"\r\n    }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { Config } from '../config';\r\n\r\n// const currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\r\n\r\n\r\nexport const authenticationService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    currentUser : new BehaviorSubject(false)\r\n\r\n    // currentUser: currentUserSubject.asObservable(),\r\n    // get currentUserValue () { return currentUserSubject.value }\r\n};\r\n\r\nfunction register(username, password, email, firstName, lastName){\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password, email, firstName, lastName })\r\n    };\r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.REGISTER}`, requestOptions)\r\n}\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.AUTH}`, requestOptions)\r\n        .then(response => {\r\n\r\n            var token = response.headers.get(\"Authorization\")\r\n            if (token){\r\n                localStorage.setItem(\"token\", token)\r\n                authenticationService.currentUser.next(true)\r\n            }\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    //localStorage.removeItem('token');\r\n    authenticationService.currentUser.next(false);\r\n}\r\n","import { Config } from '../config';\r\nvar auth = localStorage.getItem(\"token\")\r\nexport const userService = {\r\n    getCurrent,\r\n    deleteUser,\r\n    changePassword,\r\n    updateUsername\r\n};\r\n\r\nfunction changePassword(oldPass, newPass){\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json',\r\n                    'Authorization': auth, },\r\n    };\r\n    return fetch(`http://localhost:8762/user/UserController/changePassword?oldPass=${oldPass}&newPass=${newPass}`, requestOptions)\r\n}\r\n\r\nfunction updateUsername(newUsername){\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json',\r\n                    'Authorization': auth, },\r\n    };\r\n    console.log(newUsername)\r\n    return fetch(`http://localhost:8762/user/UserController/updateUsername?username=${newUsername}`, requestOptions)\r\n}\r\n\r\nfunction deleteUser() {\r\n    const requestOptions = { method: 'DELETE',\r\n    headers:{\r\n      Accept: 'application/json',\r\n               'Content-Type': 'application/json',\r\n               'Authorization': auth,\r\n       }, };    \r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.DELETEUSER}`, requestOptions)\r\n    .then(res => res.json())\r\n            .then(res =>{\r\n                console.log(\"User deleted\")\r\n                return Promise.resolve(res);\r\n            })    \r\n} \r\n\r\n\r\nfunction getCurrent() {\r\n    const requestOptions = { method: 'GET',\r\n    headers:{\r\n      Accept: 'application/json',\r\n               'Content-Type': 'application/json',\r\n               'Authorization': auth,\r\n       }, };    \r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.CURRENT}`, requestOptions)\r\n    .then(res => res.json())\r\n            .then(res =>{\r\n                return Promise.resolve(res);\r\n            })    \r\n} ","import { Config } from '../config';\r\nvar auth = localStorage.getItem(\"token\")\r\nexport const postService = {\r\n    getAll,\r\n    createPost\r\n};\r\n\r\nfunction getAll() {\r\n    \r\n    const requestOptions = { method: 'GET',\r\n    headers:{\r\n      Accept: 'application/json',\r\n               'Content-Type': 'application/json',\r\n               'Authorization': auth,\r\n       }, };\r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.ALLPOSTS}`, requestOptions)\r\n    .then(res => res.json())\r\n            .then(res =>{\r\n                return Promise.resolve(res);\r\n            }) \r\n}\r\n\r\n\r\nfunction createPost(username, title, content){\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json',\r\n                    'Authorization': auth, },\r\n        body: JSON.stringify({ username, title, content })\r\n    };\r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.CREATEPOST}`, requestOptions)\r\n}","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n// import { authenticationService } from '../_services';\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => {\r\n        var token = localStorage.getItem(\"token\")\r\n        if (!token) {\r\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n        }\r\n        return <Component {...props} />\r\n    }} />\r\n)","import React from 'react';\r\nimport { userService, authenticationService, postService } from '../_services';\r\n\r\nclass HomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentUser: authenticationService.currentUser,\r\n            post : [],\r\n            user: {\r\n                username: '',\r\n            }\r\n        };\r\n        \r\n    }\r\n    \r\n    componentWillMount(){\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            this.setState({\r\n                user: res,\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        postService.getAll()\r\n        .then(res => {\r\n            this.setState({\r\n                post: res,\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Hello, {this.state.user.username}!</h1>\r\n                <h1>Welcome to Kwitter</h1>\r\n                <br></br>\r\n                <h2><b>Overview Feed</b></h2>\r\n                <ul>\r\n                {this.state.post.length > 0 ? this.state.post.map(({id, author, title, content, dateCreated}) => (\r\n                <li key={id}>\r\n                    <b>Posted by:</b> {author}\r\n                    <br></br>\r\n                    <b>Title:</b> {title}\r\n                    <br></br>\r\n                    Posted on: {dateCreated}\r\n                    <br></br>\r\n                    Content: {content}\r\n                </li> )) : <li><p>No posts found by other kwitter users yet! Go create a post!</p></li> }\r\n                \r\n            </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { HomePage };","import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { authenticationService } from '../_services';\r\n\r\nclass LoginPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // redirect to home if already logged in\r\n        if (authenticationService.currentUserValue) { \r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Login to Kwitter</h2>\r\n                <Formik\r\n                    initialValues={{\r\n                        username: '',\r\n                        password: ''\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                        username: Yup.string().required('Username is required'),\r\n                        password: Yup.string().required('Password is required')\r\n                    })}\r\n                    onSubmit={({ username, password }, { setStatus, setSubmitting }) => {\r\n                        setStatus();\r\n                        authenticationService.login(username, password)\r\n                            .then(\r\n                                user => {\r\n                                    const { from } = this.props.location.state || { from: { pathname: \"/\" } };\r\n                                    this.props.history.push(from);\r\n                                },\r\n                                error => {\r\n                                    setSubmitting(false);\r\n                                    setStatus(error);\r\n                                }\r\n                            );\r\n                    }}\r\n                    render={({ errors, status, touched, isSubmitting }) => (\r\n                        <Form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <Field name=\"username\" type=\"text\" className={'form-control' + (errors.username && touched.username ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"username\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Login</button>\r\n                            </div>\r\n                            <div>\r\n                             Register <a href=\"/register\">here</a>\r\n                            </div>\r\n                            {status &&\r\n                                <div className={'alert alert-danger'}>{status}</div>\r\n                            }\r\n                        </Form>\r\n                    )}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { LoginPage }; ","import React from 'react';\r\nimport { userService } from '../_services';\r\nimport { Edit } from '@material-ui/icons'\r\n\r\nclass ProfilePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            user: {\r\n                username: '',\r\n                email: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                authorities: [{\r\n                    authority: '',\r\n                    name: ''\r\n                }]\r\n            },\r\n            authority: ''\r\n        };\r\n\r\n        this.handleClick = this.handleClick.bind(this)\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            this.setState({\r\n                user: res,\r\n                \r\n            })\r\n        })        \r\n    }\r\n\r\n    componentDidMount() {\r\n            \r\n    }\r\n\r\n    handleClick(){\r\n        userService.deleteUser()\r\n        localStorage.removeItem(\"token\")\r\n        \r\n        this.props.history.push('/login');\r\n    }\r\n    \r\n\r\n    render() {\r\n        const data = this.state.user.authorities\r\n        const roles = data.map((d) =>\r\n        <div>\r\n            <ul>\r\n                <li>{d.authority}</li>\r\n\r\n            </ul>\r\n        </div> )\r\n\r\n        return (\r\n            <div>\r\n\r\n                <h1 className=\"Name\">Profile page</h1>\r\n                            \r\n                    <p className=\"Name\"><b>Username:</b> {this.state.user.username}  <a href=\"/changeusername\"><Edit></Edit></a> </p> \r\n                    <p className=\"Email\"><b>E-mail:</b> {this.state.user.email}</p>\r\n                    <p className=\"Firstname\"><b>First name:</b> {this.state.user.firstName}</p>\r\n                    <p className=\"Lastname\"><b>Last name:</b> {this.state.user.lastName}</p>\r\n\r\n                    <p className=\"Role\"><b>Permissions:</b> </p>\r\n                    <div>{roles}</div>\r\n\r\n                    <div>\r\n                        <p><a href=\"/changepassword\">Change password</a></p>\r\n                    </div>\r\n                    \r\n                    <div className=\"Delete\">\r\n\r\n                        <button onClick={ () => {this.handleClick(this.state.user.username)}} className=\"btn btn-danger\">Delete account</button>  \r\n                    </div>\r\n                    \r\n            </div>\r\n\r\n            \r\n            \r\n        \r\n        );\r\n    }\r\n}\r\n\r\nexport { ProfilePage };","import React from 'react';\r\nimport { authenticationService } from '../_services';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass RegisterPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: {\r\n                username: '',\r\n                password: '',\r\n                confirm_password: '',\r\n                email: '',\r\n                firstName: '',\r\n                lastName: ''\r\n            },\r\n            submitted: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        const { user } = this.state;\r\n        this.setState({\r\n            user: {\r\n                ...user,\r\n                [name]: value\r\n            }\r\n        });\r\n    }\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.setState({ submitted: true })\r\n        const { user } = this.state;\r\n        if (user.password !== user.confirm_password) {\r\n            alert(\"Passwords don't match\");\r\n        } else \r\n            if (user.username && user.password && user.email && user.firstName && user.lastName) {\r\n                authenticationService.register(user.username, user.password, user.email, user.firstName, user.lastName);\r\n                this.props.history.push('/login');\r\n            }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { user, submitted } = this.state;\r\n        return (\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Register</h2>\r\n                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                    <div className={'form-group' + (submitted && !user.username ? ' has-error' : '')}>\r\n                        <label htmlFor=\"username\">Username</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"username\" value={user.username} onChange={this.handleChange} />\r\n                        {submitted && !user.username &&\r\n                            <div className=\"help-block\">Username is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.password ? ' has-error' : '')}>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"password\" value={user.password} onChange={this.handleChange} />\r\n                        {submitted && !user.password &&\r\n\r\n                            <div className=\"help-block\">Password is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.confirm_password ? ' has-error' : '')}>\r\n                        <label htmlFor=\"password\">Confirm password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"confirm_password\" value={user.confirm_password} onChange={this.handleChange} />\r\n                        {submitted && !user.confirm_password &&\r\n                            <div className=\"help-block\">Repeat password is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.email ? ' has-error' : '')}>\r\n                        <label htmlFor=\"email\">Email address</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"email\" value={user.email} onChange={this.handleChange} />\r\n                        {submitted && !user.firstName &&\r\n                            <div className=\"help-block\">Email is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.firstName ? ' has-error' : '')}>\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"firstName\" value={user.firstName} onChange={this.handleChange} />\r\n                        {submitted && !user.firstName &&\r\n                            <div className=\"help-block\">First Name is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.lastName ? ' has-error' : '')}>\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"lastName\" value={user.lastName} onChange={this.handleChange} />\r\n                        {submitted && !user.lastName &&\r\n                            <div className=\"help-block\">Last Name is required</div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\">Register</button>  \r\n                              \r\n                        <Link to=\"/login\" className=\"btn btn-link\">Cancel</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport { RegisterPage };","import React from 'react';\r\nimport { userService } from '../_services';\r\n\r\nclass ChangePasswordPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {\r\n                username: '',\r\n                oldPass: '',\r\n                newPass: '',\r\n                confirmPass: '',\r\n            },\r\n\r\n            submitted: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            console.log(res.username)\r\n            this.setState({\r\n                user: res,     \r\n            })\r\n        })        \r\n    }\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        const { user } = this.state;\r\n        this.setState({\r\n            user: {\r\n                ...user,\r\n                [name]: value\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.setState({ submitted: true })\r\n        const { user } = this.state\r\n        if (user.confirmPass !== user.newPass) {\r\n            alert(\"Passwords don't match\");\r\n        } else\r\n            if (user.oldPass && user.newPass && user.confirmPass){\r\n                userService.changePassword(user.oldPass, user.confirmPass)\r\n                this.props.history.push('/')\r\n            }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { user, submitted } = this.state;\r\n        return (\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Change your password</h2>\r\n                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                    <div className={'form-group' + (submitted && !user.oldPass ? ' has-error' : '')}>\r\n                        <label htmlFor=\"oldpassword\">Old password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"oldPass\" value={user.oldPass} onChange={this.handleChange} />\r\n                        {submitted && !user.oldPass &&\r\n                            <div className=\"help-block\">Old password required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.newPass ? ' has-error' : '')}>\r\n                        <label htmlFor=\"newpassword\">New password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"newPass\" value={user.newPass} onChange={this.handleChange} />\r\n                        {submitted && !user.newPass &&\r\n\r\n                            <div className=\"help-block\">New password is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.confirmPass ? ' has-error' : '')}>\r\n                        <label htmlFor=\"confirmnewpassword\">Confirm password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"confirmPass\" value={user.confirmPass} onChange={this.handleChange} />\r\n                        {submitted && !user.confirmPass &&\r\n                            <div className=\"help-block\">Repeat new password</div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\">Change password</button>  \r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ChangePasswordPage };","import React from 'react';\r\nimport { userService, postService } from '../_services';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass CreatePostPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {\r\n                username: '',\r\n            },\r\n            post: {\r\n                title: '',\r\n                content: '',\r\n            },\r\n\r\n            submitted: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n            \r\n    }\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        const { post } = this.state;\r\n        this.setState({\r\n            post: {\r\n                ...post,\r\n                [name]: value\r\n            }\r\n        });\r\n     \r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.setState({ submitted: true })\r\n        const { post } = this.state;\r\n        const { author } = this.state.user.username\r\n        if (post.title && post.content){\r\n            postService.createPost(author, post.title, post.content)\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            this.setState({\r\n                user: res,\r\n            })\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { post, submitted } = this.state;\r\n        return (\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Create post</h2>\r\n                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                    <div className={'form-group' + (submitted && !post.title ? ' has-error' : '')}>\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"title\" value={post.title} onChange={this.handleChange} />\r\n                        {submitted && !post.title &&\r\n                            <div className=\"help-block\">Enter a title</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !post.content ? ' has-error' : '')}>\r\n                        <label htmlFor=\"content\">Content</label>\r\n                        <textarea type=\"textarea\" rows=\"10\" cols=\"20\" className=\"form-control\" name=\"content\" value={post.content} onChange={this.handleChange} />\r\n                        {submitted && !post.content &&\r\n\r\n                            <div className=\"help-block\">Say something</div>\r\n                        }\r\n                    </div>\r\n                    \r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\">Create!</button>  \r\n                              \r\n                        <Link to=\"/\" className=\"btn btn-link\">Cancel</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport { CreatePostPage };","import React from 'react';\r\nimport { userService } from '../_services';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass ChangeUsernamePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {\r\n                username: '',\r\n                newUsername: ''\r\n            },\r\n            submitted: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        const { user } = this.state;\r\n        this.setState({\r\n            user: {\r\n                ...user,\r\n                [name]: value\r\n            }\r\n        });\r\n     \r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.setState({ submitted: true })\r\n        const { user } = this.state;\r\n        if (user.newUsername){\r\n            userService.updateUsername(user.newUsername)\r\n            localStorage.removeItem(\"token\")\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            this.setState({\r\n                user: res,\r\n            })\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { user, submitted } = this.state;\r\n        return (\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Change username</h2>\r\n                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                    <div className={'form-group' + (submitted && !user.newUsername ? ' has-error' : '')}>\r\n                        <label htmlFor=\"newUsername\">New username</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"newUsername\" value={user.newUsername} onChange={this.handleChange} />\r\n                        {submitted && !user.newUsername &&\r\n                            <div className=\"help-block\">Please fill in a new username</div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\">Submit</button>                   \r\n                        <Link to=\"/profile\" className=\"btn btn-link\">Cancel</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport { ChangeUsernamePage };","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport { Router, Route, Link, Switch} from 'react-router-dom';\r\nimport { history } from './_helpers';\r\nimport { authenticationService } from './_services';\r\nimport { PrivateRoute } from './_components';\r\nimport { HomePage } from './HomePage/HomePage';\r\nimport { LoginPage } from './LoginPage/LoginPage';\r\nimport { ProfilePage } from './ProfilePage/ProfilePage'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { RegisterPage } from './RegisterPage';\r\nimport { ChangePasswordPage } from './ChangePasswordPage/ChangePasswordPage';\r\nimport { CreatePostPage } from './CreatePostPage/CreatePostPage';\r\nimport { ChangeUsernamePage } from './ChangeUsernamePage/ChangeUsernamePage';\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentUser: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"Kwitter\"\r\n        authenticationService.currentUser.subscribe(x => this.setState({ currentUser: x }));\r\n    }\r\n\r\n    logout() {\r\n        \r\n        localStorage.removeItem(\"token\")\r\n        authenticationService.currentUser.next(false);\r\n        history.push('/login');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <div>\r\n                    {localStorage.getItem(\"token\") &&\r\n                        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n                            <div className=\"navbar-nav\">\r\n                                <Link to=\"/\" className=\"nav-item nav-link\">Home</Link>\r\n                                <Link to=\"/profile\" className=\"nav-item nav-link\">Profile</Link>\r\n                                <Link to=\"/createpost\" className=\"nav-item nav-link\">Create Post</Link>\r\n                                  <a onClick={this.logout} className=\"nav-item nav-link\">Logout</a>\r\n                            </div>\r\n                        </nav>\r\n                    }\r\n                    <div className=\"jumbotron\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6 offset-md-3\">\r\n                                    <Switch>\r\n                                        <PrivateRoute exact path=\"/\" component={HomePage} />\r\n                                        <PrivateRoute exact path=\"/profile\" component={ProfilePage} />\r\n                                        <PrivateRoute exact path=\"/changepassword\" component={ChangePasswordPage}/>\r\n                                        <PrivateRoute exact path=\"/createpost\" component={CreatePostPage}/>\r\n                                        <PrivateRoute exact path=\"/changeusername\" component={ChangeUsernamePage}/>\r\n                                        <Route path=\"/login\" component={LoginPage} />\r\n                                        <Route path=\"/register\" component={RegisterPage}/>\r\n                                    </Switch>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport  App  from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}