{"version":3,"sources":["config.js","_services/auth.service.js","_services/user.service.js","_helpers/history.js","_components/PrivateRoute.jsx","HomePage/HomePage.jsx","LoginPage/LoginPage.jsx","ProfilePage/ProfilePage.jsx","RegisterPage/RegisterPage.jsx","ChangePasswordPage/ChangePasswordPage.jsx","CreatePostPage/CreatePostPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Config","React","Component","ApiBaseURL","ApiUrls","AUTH","REGISTER","DELETEUSER","CURRENT","ALLUSERS","ALLPOSTS","UPDATEUSERNAME","CREATEPOST","POSTBYAUTHOR","authenticationService","login","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","token","get","localStorage","setItem","currentUser","next","logout","register","email","firstName","lastName","BehaviorSubject","auth","getItem","userService","getAll","Accept","getCurrent","res","json","Promise","resolve","deleteUser","console","log","history","createBrowserHistory","PrivateRoute","component","rest","render","props","to","pathname","state","from","location","HomePage","user","setState","this","type","name","value","LoginPage","currentUserValue","push","initialValues","validationSchema","Yup","shape","required","onSubmit","setStatus","setSubmitting","error","errors","status","touched","isSubmitting","className","htmlFor","disabled","href","ProfilePage","authorities","authority","handleClick","bind","removeItem","roles","map","d","onClick","RegisterPage","confirm_password","submitted","handleChange","handleSubmit","event","target","preventDefault","alert","onChange","ChangePasswordPage","old_password","new_password","CreatePostPage","App","document","title","subscribe","x","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e5d9149b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport class Config extends React.Component{\r\n    static ApiBaseURL = \"http://localhost:8762\"\r\n    static ApiUrls = {\r\n        AUTH: \"/auth\",\r\n        REGISTER: \"/user/UserController/register\",\r\n        DELETEUSER: \"/user/UserController/deleteUser\",\r\n        CURRENT: \"/user/UserController/current\",\r\n        ALLUSERS: \"/user/UserController/all\",\r\n        ALLPOSTS: \"/post/PostController/all\",\r\n        UPDATEUSERNAME: \"/user/UserController/updateUsername\",\r\n        CREATEPOST: \"/post/PostController/createpost\",\r\n        POSTBYAUTHOR: \"/Post/PostController/postsbyauthor\"\r\n\r\n    }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { Config } from '../config';\r\n\r\n// const currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\r\n\r\n\r\nexport const authenticationService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    currentUser : new BehaviorSubject(false)\r\n\r\n    // currentUser: currentUserSubject.asObservable(),\r\n    // get currentUserValue () { return currentUserSubject.value }\r\n};\r\n\r\nfunction register(username, password, email, firstName, lastName){\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password, email, firstName, lastName })\r\n    };\r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.REGISTER}`, requestOptions)\r\n}\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.AUTH}`, requestOptions)\r\n        .then(response => {\r\n\r\n            var token = response.headers.get(\"Authorization\")\r\n            if (token){\r\n                localStorage.setItem(\"token\", token)\r\n                authenticationService.currentUser.next(true)\r\n            }\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    //localStorage.removeItem('token');\r\n    authenticationService.currentUser.next(false);\r\n}\r\n","import { Config } from '../config';\r\nvar auth = localStorage.getItem(\"token\")\r\nexport const userService = {\r\n    getAll,\r\n    getCurrent,\r\n    deleteUser\r\n};\r\n\r\nfunction deleteUser() {\r\n    const requestOptions = { method: 'DELETE',\r\n    headers:{\r\n      Accept: 'application/json',\r\n               'Content-Type': 'application/json',\r\n               'Authorization': auth,\r\n       }, };    \r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.DELETEUSER}`, requestOptions)\r\n    .then(res => res.json())\r\n            .then(res =>{\r\n                console.log(\"User deleted\")\r\n                return Promise.resolve(res);\r\n            })    \r\n} \r\n\r\nfunction getAll() {\r\n    \r\n    const requestOptions = { method: 'GET',\r\n    headers:{\r\n      Accept: 'application/json',\r\n               'Content-Type': 'application/json',\r\n               'Authorization': auth,\r\n       }, };\r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.ALLPOSTS}`, requestOptions)\r\n    //todo set correct api call\r\n}\r\n\r\nfunction getCurrent() {\r\n    const requestOptions = { method: 'GET',\r\n    headers:{\r\n      Accept: 'application/json',\r\n               'Content-Type': 'application/json',\r\n               'Authorization': auth,\r\n       }, };    \r\n    return fetch(`${Config.ApiBaseURL + Config.ApiUrls.CURRENT}`, requestOptions)\r\n    .then(res => res.json())\r\n            .then(res =>{\r\n                return Promise.resolve(res);\r\n            })    \r\n} ","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n// import { authenticationService } from '../_services';\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => {\r\n        var token = localStorage.getItem(\"token\")\r\n        if (!token) {\r\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n        }\r\n        return <Component {...props} />\r\n    }} />\r\n)","import React from 'react';\r\n\r\nimport { userService, authenticationService } from '../_services';\r\n\r\nclass HomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentUser: authenticationService.currentUser,\r\n            user: {\r\n                username: '',\r\n            }\r\n        };\r\n        \r\n    }\r\n    \r\n    componentWillMount(){\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            this.setState({\r\n                user: res,\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Hello, {this.state.user.username}!</h1>\r\n                <h1>Welcome to Kwitter</h1>\r\n                <br></br>\r\n                <h2>Posts overview:</h2>\r\n            <form>\r\n                    <label>\r\n                    Name:\r\n                    <input type=\"text\" name=\"name\" />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Search\" />\r\n            </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { HomePage };","import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { authenticationService } from '../_services';\r\n\r\nclass LoginPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // redirect to home if already logged in\r\n        if (authenticationService.currentUserValue) { \r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Login to Kwitter</h2>\r\n                <Formik\r\n                    initialValues={{\r\n                        username: '',\r\n                        password: ''\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                        username: Yup.string().required('Username is required'),\r\n                        password: Yup.string().required('Password is required')\r\n                    })}\r\n                    onSubmit={({ username, password }, { setStatus, setSubmitting }) => {\r\n                        setStatus();\r\n                        authenticationService.login(username, password)\r\n                            .then(\r\n                                user => {\r\n                                    const { from } = this.props.location.state || { from: { pathname: \"/\" } };\r\n                                    this.props.history.push(from);\r\n                                },\r\n                                error => {\r\n                                    setSubmitting(false);\r\n                                    setStatus(error);\r\n                                }\r\n                            );\r\n                    }}\r\n                    render={({ errors, status, touched, isSubmitting }) => (\r\n                        <Form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <Field name=\"username\" type=\"text\" className={'form-control' + (errors.username && touched.username ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"username\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Login</button>\r\n                            </div>\r\n                            <div>\r\n                             Register <a href=\"/register\">here</a>\r\n                            </div>\r\n                            {status &&\r\n                                <div className={'alert alert-danger'}>{status}</div>\r\n                            }\r\n                        </Form>\r\n                    )}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { LoginPage }; ","import React from 'react';\r\nimport { userService } from '../_services';\r\n\r\nclass ProfilePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            user: {\r\n                username: '',\r\n                email: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                authorities: [{\r\n                    authority: '',\r\n                    name: ''\r\n                }]\r\n            },\r\n            authority: ''\r\n        };\r\n\r\n        this.handleClick = this.handleClick.bind(this)\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            this.setState({\r\n                user: res,\r\n                \r\n            })\r\n        })        \r\n    }\r\n\r\n    componentDidMount() {\r\n            \r\n    }\r\n\r\n    handleClick(){\r\n        userService.deleteUser()\r\n        localStorage.removeItem(\"token\")\r\n        \r\n        this.props.history.push('/login');\r\n    }\r\n    \r\n\r\n    render() {\r\n        const data = this.state.user.authorities\r\n        const roles = data.map((d) =>\r\n        <div>\r\n            <ul>\r\n                <li>{d.authority}</li>\r\n\r\n            </ul>\r\n        </div> )\r\n\r\n        return (\r\n            <div>\r\n\r\n                <h1 className=\"Name\">Profile page</h1>\r\n                            \r\n                    <p className=\"Name\"><b>Username:</b> {this.state.user.username}</p>\r\n                    <p className=\"Email\"><b>E-mail:</b> {this.state.user.email}</p>\r\n                    <p className=\"Firstname\"><b>First name:</b> {this.state.user.firstName}</p>\r\n                    <p className=\"Lastname\"><b>Last name:</b> {this.state.user.lastName}</p>\r\n\r\n                    <p className=\"Role\"><b>Permissions:</b> </p>\r\n                    <div>{roles}</div>\r\n\r\n                    <div>\r\n                        <p><a href=\"/changepassword\">Change password</a></p>\r\n                    </div>\r\n                    \r\n                    <div className=\"Delete\">\r\n\r\n                        <button onClick={ () => {this.handleClick(this.state.user.username)}} className=\"btn btn-danger\">Delete account</button>  \r\n                    </div>\r\n                    \r\n            </div>\r\n\r\n            \r\n            \r\n        \r\n        );\r\n    }\r\n}\r\n\r\nexport { ProfilePage };","import React from 'react';\r\nimport { authenticationService } from '../_services';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass RegisterPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: {\r\n                username: '',\r\n                password: '',\r\n                confirm_password: '',\r\n                email: '',\r\n                firstName: '',\r\n                lastName: ''\r\n            },\r\n            submitted: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        const { user } = this.state;\r\n        this.setState({\r\n            user: {\r\n                ...user,\r\n                [name]: value\r\n            }\r\n        });\r\n    }\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.setState({ submitted: true })\r\n        const { user } = this.state;\r\n        if (user.password !== user.confirm_password) {\r\n            alert(\"Passwords don't match\");\r\n        } else \r\n            if (user.username && user.password && user.email && user.firstName && user.lastName) {\r\n                authenticationService.register(user.username, user.password, user.email, user.firstName, user.lastName);\r\n                this.props.history.push('/login');\r\n            }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { user, submitted } = this.state;\r\n        return (\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Register</h2>\r\n                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                    <div className={'form-group' + (submitted && !user.username ? ' has-error' : '')}>\r\n                        <label htmlFor=\"username\">Username</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"username\" value={user.username} onChange={this.handleChange} />\r\n                        {submitted && !user.username &&\r\n                            <div className=\"help-block\">Username is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.password ? ' has-error' : '')}>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"password\" value={user.password} onChange={this.handleChange} />\r\n                        {submitted && !user.password &&\r\n\r\n                            <div className=\"help-block\">Password is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.confirm_password ? ' has-error' : '')}>\r\n                        <label htmlFor=\"password\">Confirm password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"confirm_password\" value={user.confirm_password} onChange={this.handleChange} />\r\n                        {submitted && !user.confirm_password &&\r\n                            <div className=\"help-block\">Repeat password is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.email ? ' has-error' : '')}>\r\n                        <label htmlFor=\"email\">Email address</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"email\" value={user.email} onChange={this.handleChange} />\r\n                        {submitted && !user.firstName &&\r\n                            <div className=\"help-block\">Email is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.firstName ? ' has-error' : '')}>\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"firstName\" value={user.firstName} onChange={this.handleChange} />\r\n                        {submitted && !user.firstName &&\r\n                            <div className=\"help-block\">First Name is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.lastName ? ' has-error' : '')}>\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"lastName\" value={user.lastName} onChange={this.handleChange} />\r\n                        {submitted && !user.lastName &&\r\n                            <div className=\"help-block\">Last Name is required</div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\">Register</button>  \r\n                              \r\n                        <Link to=\"/login\" className=\"btn btn-link\">Cancel</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport { RegisterPage };","import React from 'react';\r\nimport { userService } from '../_services';\r\n\r\nclass ChangePasswordPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {\r\n                old_password: '',\r\n                new_password: '',\r\n                confirm_password: '',\r\n            },\r\n\r\n            submitted: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n        userService.getCurrent()\r\n        .then(res => {\r\n            this.setState({\r\n                user: res,     \r\n            })\r\n        })        \r\n    }\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        const { user } = this.state;\r\n        this.setState({\r\n            user: {\r\n                ...user,\r\n                [name]: value\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.setState({ submitted: true })\r\n        // if (user.password !== user.confirm_password) {\r\n        //     alert(\"Passwords don't match\");\r\n        // }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { user, submitted } = this.state;\r\n        return (\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Change your password</h2>\r\n                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                    <div className={'form-group' + (submitted && !user.old_password ? ' has-error' : '')}>\r\n                        <label htmlFor=\"username\">Old password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"password\" value={user.old_password} onChange={this.handleChange} />\r\n                        {submitted && !user.old_password &&\r\n                            <div className=\"help-block\">Old password required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.password ? ' has-error' : '')}>\r\n                        <label htmlFor=\"password\">New password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"password\" value={user.new_password} onChange={this.handleChange} />\r\n                        {submitted && !user.new_password &&\r\n\r\n                            <div className=\"help-block\">New password is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (submitted && !user.confirm_password ? ' has-error' : '')}>\r\n                        <label htmlFor=\"password\">Confirm password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"confirm_password\" value={user.confirm_password} onChange={this.handleChange} />\r\n                        {submitted && !user.confirm_password &&\r\n                            <div className=\"help-block\">Repeat password is required</div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\">Change password</button>  \r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ChangePasswordPage };","import React from 'react';\r\n\r\nclass CreatePostPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n            \r\n    }\r\n    handleChange() {\r\n     \r\n    }\r\n\r\n    handleSubmit(){\r\n  \r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Create</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport { CreatePostPage };","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport { Router, Route, Link, Switch} from 'react-router-dom';\r\nimport { history } from './_helpers';\r\nimport { authenticationService } from './_services';\r\nimport { PrivateRoute } from './_components';\r\nimport { HomePage } from './HomePage/HomePage';\r\nimport { LoginPage } from './LoginPage/LoginPage';\r\nimport { ProfilePage } from './ProfilePage/ProfilePage'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { RegisterPage } from './RegisterPage';\r\nimport { ChangePasswordPage } from './ChangePasswordPage/ChangePasswordPage';\r\nimport { CreatePostPage } from './CreatePostPage/CreatePostPage';\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentUser: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"Kwitter\"\r\n        authenticationService.currentUser.subscribe(x => this.setState({ currentUser: x }));\r\n    }\r\n\r\n    logout() {\r\n        \r\n        localStorage.removeItem(\"token\")\r\n        authenticationService.currentUser.next(false);\r\n        history.push('/login');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <div>\r\n                    {localStorage.getItem(\"token\") &&\r\n                        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n                            <div className=\"navbar-nav\">\r\n                                <Link to=\"/\" className=\"nav-item nav-link\">Home</Link>\r\n                                <Link to=\"/profile\" className=\"nav-item nav-link\">Profile</Link>\r\n                                <Link to=\"/createpost\" className=\"nav-item nav-link\">Create Post</Link>\r\n                                  <a onClick={this.logout} className=\"nav-item nav-link\">Logout</a>\r\n                            </div>\r\n                        </nav>\r\n                    }\r\n                    <div className=\"jumbotron\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6 offset-md-3\">\r\n                                    <Switch>\r\n                                        <PrivateRoute exact path=\"/\" component={HomePage} />\r\n                                        <PrivateRoute exact path=\"/profile\" component={ProfilePage} />\r\n                                        <PrivateRoute exact path=\"/changepassword\" component={ChangePasswordPage}/>\r\n                                        <PrivateRoute exact path=\"/createpost\" component={CreatePostPage}/>\r\n                                        <Route path=\"/login\" component={LoginPage} />\r\n                                        <Route path=\"/register\" component={RegisterPage}/>\r\n                                    </Switch>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport  App  from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}